import speech_recognition as sr
from gtts import gTTS
import pyttsx3
import os
import webbrowser
import wikipedia

# Initialize the recognizer
recognizer = sr.Recognizer()

# Initialize speech synthesis engines
gtts_engine = gTTS
pyttsx3_engine = pyttsx3.init()

def listen():
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

    try:
        print("Recognizing...")
        command = recognizer.recognize_google(audio)
        print("You said: " + command)
        return command.lower()
    except sr.UnknownValueError:
        print("Sorry, I didn't get that.")
        return ""

def speak(text, engine="gtts"):
    if engine == "gtts":
        tts = gtts_engine(text=text, lang='en')
        tts.save("output.mp3")
        os.system("start output.mp3")  # Opens the speech output
    elif engine == "pyttsx3":
        pyttsx3_engine.say(text)
        pyttsx3_engine.runAndWait()

def perform_action(command):
    if "open browser" in command:
        webbrowser.open('https://www.google.com')
    elif "open control panel" in command:
        os.system("control panel")
    elif "open camera" in command:
        # Code to open camera app or access camera
        os.system("start microsoft.windows.camera:")

    elif "search" in command:
        search_query = command.replace("search", "")
        webbrowser.open('https://www.google.com/search?q=' + search_query)
    elif "wikipedia" in command:
        search_query = command.replace("wikipedia", "")
        try:
            result = wikipedia.summary(search_query, sentences=2)
            print(result)
            speak(result)
        except wikipedia.exceptions.DisambiguationError as e:
            print("Ambiguous term. Please be more specific.")
            speak("Ambiguous term. Please be more specific.")
        except wikipedia.exceptions.PageError as e:
            print("Sorry, I couldn't find any relevant information.")
            speak("Sorry, I couldn't find any relevant information.")

if _name_ == "_main_":
    while True:
        command = listen()
        if command:
            speak("Executing command: " + command)
            perform_action(command)
